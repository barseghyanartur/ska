====================================
TODOS
====================================
Base on MoSCoW principle. Must haves and should haves are planned to be worked on.

* Features/issues marked with plus (+) are implemented/solved.
* Features/issues marked with minus (-) are yet to be implemented.

Must haves
------------------------------------
+ Class based views validation decorator.
+ Extend the Django app with authentication backend for logging into Django with
  tokens generated by `ska`.
+ For auth backend, add models for tracking of the used tokens. Add management
  commands for purging the tracking data.
+ Demo (quick installer) for Django app.
+ Populate foo model data in demo app.
- Make it easy to add additional data (such as user data, for auth backend) to the
  URL. Sign additional data (affect the signature hash) when providing extra params.
  In that case, provider (see later on) would be just one of those; NOTE, that it
  shall be a reserved "term").
- Add browser info to the token (auth backend).
- Better documentation for `ska.contrib.django.ska` module.
- Add tests for Django auth backend.
- In Django app, allow multiple secret keys (add param provider, which would
  contain a UID of the provider and would be as well embed into the signature).
  Based on the UID, locally an appropriate provider would be picked. The
  default secret_key would stay intact.
- Allow to define a custom callback per provider.

Should haves
------------------------------------
- Update the tests (mkdirs) so that database creation for Django ska app works
  smoothly.
- Find and implement the best way of making `ska` timezone aware.

Could haves
------------------------------------
- Plone app for logging into Plone with tokens generated by `ska` (in-development).
- Additional security measures (like browser info embed into signature). If
  browser changed, it becomes invalid.

Would haves
------------------------------------
